#!/bin/env python3
# vim: set ts=4 sw=4 :
# vim: set noexpandtab :

import sys
import io

import locale
import inspect

import docutils.utils
import docutils.parsers.rst

import argparse
import json

import locale

import lxml.etree 

class DocumentSettings:
	def __init__( self ):
		self.tab_width = 8
		self.report_level = 10
		self.halt_level = 20
		self.warning_stream = sys.stderr
		self.debug = False
		self.error_encoding = None
		self.error_encoding_error_handler = None
		self.language_code = "EN"
		self.pep_references = None
		self.rfc_references = None
		self.id_prefix = ""



class DocumentProcessor( object ):

	class State( object ):
		def __init__( self ):
			return

	def __init__( self ):
		return

	@staticmethod
	def check( condition, message, *, asrt=False ):
		if not condition:
			if asrt and not __debug__: raise AssertionError( message )
			raise RuntimeError( message )
		return

	@staticmethod
	def xpath( element, path, *, count=None, must_exist, asrt=False, msg="" ):
		verbose_write( 3, "{}:element = {}".format( msg, lxml.etree.tostring( element ).decode( "utf-8" ) ), stack_depth=2 )
		verbose_write( 1, "{}:xpath = {}".format( msg, path ), stack_depth=2 )
		result = element.xpath( path )
		verbose_write( 2, "{}:result = {}, len( result ) = {}".format( msg, result, len( result ) ), stack_depth=2 )
		if must_exist:
			DocumentProcessor.check( ( result is not None ) and ( len( result ) > 0 ), "{}:xpath query [{}] did not yield results.".format( msg, path ) )
		if count is not None:
			DocumentProcessor.check( count( len( result ) ), "{}:xpath query [{}] got {} results, expected something else".format( msg, path, len( result ) ) )
		return result;

	def process( self, root ):
		#URL：
		#API Address：
		#api_section_path = ".//section[ ( definition_list/definition_list_item/term = 'URL：' ) or ( definition_list/definition_list_item/term = 'API Address：' ) ]"
		#api_section_path = "//section[ ( starts-with( section/definition_list/definition_list_item/term, 'URL' ) ) or ( starts-with( section/definition_list/definition_list_item/term, 'API Address' ) ) ]"
		#verbose_write( 1, "api_section_path = {}".format( api_section_path ) )
		#verbose_write( 3, "api_sections = {}".format( [ lxml.etree.tostring( api_section ) for api_section in api_sections ] ) )
		#api_sections = root.getroottree().xpath( api_section_path )
		api_sections = self.xpath( root.getroottree(), "//section[ ( starts-with( section/definition_list/definition_list_item/term, 'URL' ) ) or ( section/definition_list/definition_list_item/term = 'API Address：' ) ]", must_exist = True, msg="looking for api sections inside document" )
		if api_sections is not None:
			for api_section in api_sections:
				self.process_api_section( api_section )
		return
	
	def process_api_section( self, api_section ):
		verbose_write( 3, "api_section = {}".format( lxml.etree.tostring( api_section ).decode( "utf-8" ) ) )

		#method_section_path = "./section[ ( starts-with( definition_list/definition_list_item/term, 'URL' ) ) or ( starts-with( definition_list/definition_list_item/term, 'API Address' ) ) ]"
		#verbose_write( 1, "method_section_path = {}".format( method_section_path ) )
		#method_sections = api_section.xpath( method_section_path )
		#self.check( method_sections is not None, "xpath query [ {} ] did not yield results.".format( method_section_path ), asrt=True )
		method_sections = self.xpath( root.getroottree(), "./section/section[ ( starts-with( definition_list/definition_list_item/term, 'URL' ) ) or ( starts-with( definition_list/definition_list_item/term, 'API Address' ) ) ]", count=( lambda x: x >= 1 ), must_exist = True, asrt = True, msg="looking for method sections inside api section" )
		for method_section in method_sections:
			self.process_method_section( method_section )
		return

	def process_method_section( self, method_section ):
		verbose_write( 2, "method_section = {}".format( lxml.etree.tostring( method_section ).decode( "utf-8" ) ) )
		definition_list = self.xpath( method_section, "./definition_list", count=( lambda x: x == 1 ), must_exist = True, asrt = True, msg="looking for definition_list inside method section" )[ 0 ]
		url = self.xpath( definition_list, "./definition_list_item[ starts-with( term, 'URL' ) or starts-with( term, 'API Address' ) ]/definition/bullet_list/list_item/paragraph/reference/text()", count=( lambda x: x == 1 ), must_exist = True, asrt = True, msg="looking for url in definition_list" )[ 0 ]
		verbose_write( 1, "url = {}".format( url ) )
		return
	

if __name__ == '__main__':

	default_encoding = locale.getpreferredencoding()

	argument_parser = argparse.ArgumentParser()
	argument_parser.add_argument( "-v", "--verbose", action="count", dest="verbosity", help="increase verbosity level" )
	argument_parser.add_argument( "-i", "--input", action="append", dest="inputs_o", metavar="INPUT", default=[], help="specify input file" )
	argument_parser.add_argument( "input", action="store", nargs="*", help="specify input file" )
	argument_parser.add_argument( "-o", "--output", action="store", dest="output", nargs=1, help="specify output file" )
	argument_parser.add_argument( "-e", "--encoding", action="store", dest="encoding", nargs=1, default=default_encoding, help="specify encoding (default={})".format( default_encoding ) )

	arguments = argument_parser.parse_args( args = sys.argv[1:] )

	if arguments.verbosity is not None:
		def verbose_write( level, string, *, stack_depth=1 ):
			if ( level + 1 ) <= arguments.verbosity:
				## https://gist.github.com/techtonik/2151727
				stack = inspect.stack()
				parentframe = stack[ stack_depth ][ 0 ]
				module = inspect.getmodule( parentframe )
				module_name = ""
				class_name = ""
				if module:
						module_name = module.__name__
				if 'self' in parentframe.f_locals:
						class_name = parentframe.f_locals['self'].__class__.__name__
				code_name = parentframe.f_code.co_name;

				sys.stderr.write( "{}::{}::{}[{}]:{}\n".format( module_name, class_name, code_name, parentframe.f_lineno, string ) )

	else:
		verbose_write = lambda *a: None

	inputs = []
	inputs += arguments.inputs_o
	inputs += arguments.input

	verbose_write( 0, "arguments.verbosity={}".format( json.dumps( arguments.verbosity ) ) )
	verbose_write( 0, "arguments.inputs_o={}".format( json.dumps( arguments.inputs_o ) ) )
	verbose_write( 0, "arguments.input={}".format( json.dumps( arguments.input ) ) )
	verbose_write( 0, "arguments.encoding={}".format( json.dumps( arguments.encoding ) ) )
	verbose_write( 0, "inputs={}".format( json.dumps( inputs ) ) )


	input_fhs = []

	if len( inputs ) > 0:
		for input in inputs:
			input_fhs = input_fhs + [ open( input, "r", encoding=arguments.encoding ) ]
	else:
		input_fhs = input_fhs +[ io.TextIOWrapper( sys.stdin.buffer, encoding=arguments.encoding ) ]

	rst_parser = docutils.parsers.rst.Parser()
	document_settings = DocumentSettings()
	etree_parser = lxml.etree.XMLParser( remove_blank_text=True, resolve_entities=True )

	document_processor = DocumentProcessor()

	for input_fh in input_fhs:
		verbose_write( 0, "input_fh={}".format( input_fh ) )
		input_data = input_fh.read()
		document = docutils.utils.new_document( source_path=input_fh.name, settings=document_settings )
		rst_parser.parse( input_data, document )
		verbose_write( 1, "document.children={}".format( document.children ) )
		verbose_write( 2, "document.asdom()={}".format( document.asdom() ) )
		verbose_write( 5, "document={}".format( document.asdom().toprettyxml( "  ", '\n' ) ) )
		tmp = open( input_fh.name + ".xml", 'w' )
		verbose_write( 2, "tmp.name={}".format( tmp.name ) )
		tmp.write( document.asdom().toprettyxml( "  ", '\n' ) )
		root = lxml.etree.fromstring( document.asdom().toxml(), etree_parser )
		document_processor.process( root )


